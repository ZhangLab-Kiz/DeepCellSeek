API.flag <- 1
}
if (class(input) == 'list') {
input <- sapply(input, paste, collapse = ',')
} else {
input <- input[input$avg_log2FC > 0, , drop = FALSE]
input <- tapply(input$gene, list(input$cluster),
function(i) paste0(i[1:min(length(i), topgenenumber)], collapse = ','))
}
if (!API.flag) {
message <- paste0('Identify cell types of ', tissuename,
' cells using the following markers separately for each\n row. ',
'Only provide the cell type name. Do not show numbers before the name.\n ',
'IMPORTANT: Return exactly ', length(id), ' lines, one for each row.\n',
'Some can be a mixture of multiple cell types. ', "\n",
paste0(names(input), ':', unlist(input), collapse = "\n"))
return(message)
} else {
print(paste0("Note: ", model_type, " API key found: returning the cell type annotations."))
cutnum <- ceiling(length(input) / 30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input), cutnum))
} else {
cid <- rep(1, length(input))
}
allres <- sapply(1:cutnum, function(i) {
id <- which(cid == i)
flag <- 0
retry_count <- 0
max_retries <- 3
while (flag == 0 && retry_count < max_retries) {
tryCatch({
prompt <- paste0('Identify cell types of ', tissuename,
' cells using the following markers separately for each\n row. ',
'Only provide the cell type name. Do not show numbers before the name.\n',
'IMPORTANT: Return exactly ', length(id), ' lines, one for each row.\n',
'Some can be a mixture of multiple cell types.\n',
paste(names(input)[id], ':', input[id], collapse = '\n'))
# 打印输入提示
if (verbose) {
cat("\n==== PROMPT SENT TO MODEL (BATCH ", i, "/", cutnum, ") ====\n")
cat(prompt)
cat("\n=======================================\n")
}
if (model_type == "openai") {
response <- openai::create_chat_completion(
model = model,
messages = list(list(
"role" = "user",
"content" = prompt
)),
temperature = 0.3
)
res <- strsplit(response$choices[, 'message.content'], '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(response$choices[, 'message.content'])
cat("\n=======================================\n")
}
} else if (model_type == "deepseek") {
req <- httr2::request("https://api.deepseek.com/v1/chat/completions") |>
httr2::req_headers(
"Content-Type" = "application/json",
"Authorization" = paste("Bearer", api_key)
) |>
httr2::req_body_json(list(
model = model,
messages = list(
list(role = "user", content = prompt)
),
temperature = 0.3
)) |>
httr2::req_perform()
resp <- httr2::resp_body_json(req)
res <- strsplit(resp$choices[[1]]$message$content, '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(resp$choices[[1]]$message$content)
cat("\n=======================================\n")
}
} else if (model_type == "claude") {
req <- httr2::request("https://api.anthropic.com/v1/messages") |>
httr2::req_headers(
"Content-Type" = "application/json",
"x-api-key" = api_key,
"anthropic-version" = "2023-06-01"
) |>
httr2::req_body_json(list(
model = model,
messages = list(
list(role = "user", content = prompt)
),
temperature = 0.3,
max_tokens = 32000
)) |>
httr2::req_perform()
resp <- httr2::resp_body_json(req)
res <- strsplit(resp$content[[1]]$text, '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(resp$content[[1]]$text)
cat("\n=======================================\n")
}
} else if (model_type == "gemini") {
base_url <- "https://generativelanguage.googleapis.com/v1/models"
endpoint <- paste0(base_url, "/", model, ":generateContent?key=", api_key)
req <- httr2::request(endpoint) |>
httr2::req_headers("Content-Type" = "application/json") |>
httr2::req_body_json(list(
contents = list(
list(parts = list(
list(text = prompt)
))
),
generationConfig = list(
temperature = 0.3
)
)) |>
httr2::req_perform()
resp <- httr2::resp_body_json(req)
res <- strsplit(resp$candidates[[1]]$content$parts[[1]]$text, '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(resp$candidates[[1]]$content$parts[[1]]$text)
cat("\n=======================================\n")
}
} else if (model_type == "grok") {
req <- httr2::request("https://api.x.ai/v1/chat/completions") |>
httr2::req_headers(
"Content-Type" = "application/json",
"Authorization" = paste("Bearer", api_key)
) |>
httr2::req_body_json(list(
model = model,
messages = list(
list(role = "user", content = prompt)
),
temperature = 0.3
)) |>
httr2::req_perform()
resp <- httr2::resp_body_json(req)
res <- strsplit(resp$choices[[1]]$message$content, '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(resp$choices[[1]]$message$content)
cat("\n=======================================\n")
}
} else if (model_type == "kimi") {
req <- httr2::request("https://api.moonshot.cn/v1/chat/completions") |>
httr2::req_headers(
"Content-Type" = "application/json",
"Authorization" = paste("Bearer", api_key)
) |>
httr2::req_body_json(list(
model = model,
messages = list(
list(role = "user", content = prompt)
),
temperature = 0.3
)) |>
httr2::req_perform()
resp <- httr2::resp_body_json(req)
res <- strsplit(resp$choices[[1]]$message$content, '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(resp$choices[[1]]$message$content)
cat("\n=======================================\n")
}
} else if (model_type == "doubao") {
req <- httr2::request("https://ark.cn-beijing.volces.com/api/v3/chat/completions") |>
httr2::req_headers(
"Content-Type" = "application/json",
"Authorization" = paste("Bearer", api_key)
) |>
httr2::req_body_json(list(
model = model,
messages = list(
list(role = "user", content = prompt)
),
temperature = 0.3
)) |>
httr2::req_perform()
resp <- httr2::resp_body_json(req)
res <- strsplit(resp$choices[[1]]$message$content, '\n')[[1]]
# 打印模型输出
if (verbose) {
cat("\n==== RAW MODEL RESPONSE ====\n")
cat(resp$choices[[1]]$message$content)
cat("\n=======================================\n")
}
}
res <- res[nzchar(trimws(res))]
if (length(res) == length(id)) {
flag <- 1
} else {
warning("Response mismatch: expected ", length(id), " items but got ", length(res))
valid_results <- min(length(res), length(id))
partial_results <- res[1:valid_results]
if (valid_results > 0 && retry_count >= max_retries - 1) {
missing_count <- length(id) - valid_results
res <- c(partial_results, rep("Failed to annotate", missing_count))
flag <- 1
} else {
cat("Response length mismatch. Retrying...\n")
retry_count <- retry_count + 1
}
}
}, error = function(e) {
cat("API call error:", e$message, ". Retrying...\n")
retry_count <- retry_count + 1
Sys.sleep(2)
})
}
if (flag == 0) {
warning("Failed to get proper response after ", max_retries, " retries for batch ", i)
res <- rep("Failed to annotate", length(id))
}
names(res) <- names(input)[id]
return(res)
}, simplify = FALSE)
print(paste0('Note: It is always recommended to check the results returned by ',
model, ' in case of AI hallucination, before going to down-stream analysis.'))
result <- gsub(',$', '', unlist(allres))
result <- sub("^[^a-zA-Z]*([a-zA-Z].*)", "\\1", result)
# 输出最终处理后的结果
if (verbose) {
cat("\n==== FINAL PROCESSED RESULTS ====\n")
for (i in 1:length(result)) {
cat(names(result)[i], ":", result[i], "\n")
}
cat("=======================================\n")
}
return(result)
}
}
cell_types <- llm_celltype(
input = top10_fc,
tissuename = "Thymus",
model = "gpt-4o",
topgenenumber = 10
)
color_mapping <- c(
"Adipocytes"                           = "#FF6347",
"B cells"                              = "#708090",
"Cardiomyocyte"                        = "#FF7F50",
"Cardiomyocytes"                       = "#FF7F50",
"endothelial cell"                     = "#228B22",
"Endothelial cell"                     = "#228B22",
"Endothelial Cell"                     = "#228B22",
"endothelial cell of lymphatic vessel" = "#7B68EE",
"Endothelial Cells"                    = "#228B22",
"Endothelial cells"                    = "#228B22",
"Endothelial Cells  "                  = "#228B22",
"ENS glia"                             = "#9932CC",
"Enteric Glial Cells"                  = "#9932CC",
"Enteric Glial Cells  "                = "#9932CC",
"Enterocyte"                           = "#F4A460",
"Enteroendocrine cell"                 = "#8FBC8F",
"Enteroendocrine Cells"                = "#8FBC8F",
"Enteroendocrine cells"                = "#8FBC8F",
"Epithelial Cell"                      = "#FF00FF",
"Epithelial cells"                     = "#FF00FF",
"Erythrocytes"                         = "#6A5ACD",
"fibroblast"                           = "#FFA500",
"Fibroblast"                           = "#FFA500",
"Fibroblasts"                          = "#FFA500",
"Fibroblasts  "                        = "#FFA500",
"Gilia cell"                           = "#9932CC",
"glial cell"                           = "#9932CC",
"Granulocytes"                         = "#B8860B",
"interstitial cell of Cajal"           = "#4682B4",
"Interstitial Cells of Cajal  "        = "#4682B4",
"Lymphatic endothelial cell"           = "#7B68EE",
"Lymphatic Endothelial Cells"          = "#7B68EE",
"Lymphatic endothelial cells"          = "#7B68EE",
"Lymphatic Endothelial Cells  "        = "#7B68EE",
"Myofibroblasts"                       = "#8B4513",
"Neural crest - derived cells"         = "#CD5C5C",
"Neural crest cells"                   = "#CD5C5C",
"Neuroendocrine Cell"                  = "#DAA520",
"Neurons"                              = "#20B2AA",
"Oligodendrocytes"                     = "#DB7093",
"Pericyte"                             = "#B22222",
"pericyte cell"                        = "#B22222",
"Pericytes"                            = "#B22222",
"Schwann Cell"                         = "#40E0D0",
"Schwann cell precursor"               = "#40E0D0",
"Schwann Cells"                        = "#40E0D0",
"smooth muscle cell"                   = "#FF4500",
"smooth muscle cell"                   = "#FF4500",
"Smooth Muscle Cell"                   = "#FF4500",
"Smooth muscle cell"                   = "#FF4500",
"Smooth muscle cells"                  = "#FF4500",
"Smooth Muscle Cells"                  = "#FF4500",
"Smooth Muscle Cells  "                = "#FF4500",
"Stromal cells"                        = "#F1C40F",
"T cells"                              = "#556B2F",
"Telocyte"                             = "#FF1493",
"Vascular endothelial cells"           = "#228B22",
"Vascular Smooth Muscle Cells"         = "#FF4500"
)
seu <-readRDS("D:/Data/Done/Mouse/Colon 10x3/log2fc/seu.rds")
columns_to_plot <- c("CellType", "deepseek_celltype", "gpt_celltype", "claude_celltype",
"grok_celltype", "gemini_celltype", "kimi_celltype",
"doubao_celltype", "sctype_classification", "cellmark", "singleR")
all_cell_types_fixed <- unique(unlist(lapply(seu@meta.data[, columns_to_plot], function(x) {
if(is.factor(x)) as.character(x) else x
})))
group_vars <- c(
"CellType", "deepseek_celltype", "gpt_celltype", "claude_celltype",
"grok_celltype", "gemini_celltype", "kimi_celltype", "doubao_celltype",
"sctype_classification", "cellmark", "singleR"
)
# 2. 从 meta.data 中提取这 11 列（如有需要）
selected_data <- seu@meta.data[, group_vars]
# 3. 循环绘图并保存
for (var in group_vars) {
# 构建标题（可选）
ttl <- var
# 绘制 UMAP
p <- DimPlot(
object   = seu,
reduction = "umap",
group.by  = var,
label     = FALSE,
pt.size   = 0.5,
cols      = color_mapping
) +
theme(aspect.ratio = 1,
axis.line = element_blank(),    # 移除坐标轴线
axis.text = element_blank(),    # 移除坐标轴文本
axis.ticks = element_blank(),   # 移除坐标轴刻度
axis.title = element_blank(),   # 移除坐标轴标题
legend.position = "none",       # 移除图例
panel.grid = element_blank(),   # 移除网格线
panel.background = element_rect(fill = "white", color = NA),  # 白色背景，无边框
panel.border = element_blank(), # 移除面板边框
plot.margin = unit(c(0,0,0,0), "cm")) +  # 最小化边距
labs(title = NULL)
# 保存为 600 dpi PNG
ggsave(
filename = paste0("UMAP_", var, ".png"),
plot     = p,
dpi      = 600,
width    = 15,    # 图宽（英寸），可根据需要调整
height   = 15     # 图高（英寸）
)
}
###标准处理流程
library(Matrix)
library(Seurat)
library(dplyr)
library(harmony)
library(ggplot2)
# 1. 定义你要用来分组的列
group_vars <- c(
"CellType", "deepseek_celltype", "gpt_celltype", "claude_celltype",
"grok_celltype", "gemini_celltype", "kimi_celltype", "doubao_celltype",
"sctype_classification", "cellmark", "singleR"
)
# 2. 从 meta.data 中提取这 11 列（如有需要）
selected_data <- seu@meta.data[, group_vars]
# 3. 循环绘图并保存
for (var in group_vars) {
# 构建标题（可选）
ttl <- var
# 绘制 UMAP
p <- DimPlot(
object   = seu,
reduction = "umap",
group.by  = var,
label     = FALSE,
pt.size   = 0.5,
cols      = color_mapping
) +
theme(aspect.ratio = 1,
axis.line = element_blank(),    # 移除坐标轴线
axis.text = element_blank(),    # 移除坐标轴文本
axis.ticks = element_blank(),   # 移除坐标轴刻度
axis.title = element_blank(),   # 移除坐标轴标题
legend.position = "none",       # 移除图例
panel.grid = element_blank(),   # 移除网格线
panel.background = element_rect(fill = "white", color = NA),  # 白色背景，无边框
panel.border = element_blank(), # 移除面板边框
plot.margin = unit(c(0,0,0,0), "cm")) +  # 最小化边距
labs(title = NULL)
# 保存为 600 dpi PNG
ggsave(
filename = paste0("UMAP_", var, ".png"),
plot     = p,
dpi      = 600,
width    = 15,    # 图宽（英寸），可根据需要调整
height   = 15     # 图高（英寸）
)
}
all_markers <- FindAllMarkers(
object = seu,
only.pos = TRUE,
min.pct = 0.25,
group.by = "ident",
logfc.threshold = 0.25
)
library(devtools)
library(roxygen2)
setwd("D:/Coding/DeepCellSeek")
document()
library(usethis)
document()
check()
check()
document()
check()
build()
install()
library(DeepCellSeek)
cell_types <- llm_subcelltype(
input = all_markers,
celltypename = "Kidney tubule cell",
tissuename = "Kidney",
model = "deepseek-reasoner",
topgenenumber = 10
)
Sys.setenv(OPENAI_API_KEY = "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")
seu <-readRDS(""D:/Data/Done/Mouse/Tabula Muris/Thymus-10X_P7_11/seu.rds"")
seu <-readRDS("D:/Data/Done/Mouse/Tabula Muris/Thymus-10X_P7_11/seu.rds")
all_markers <- FindAllMarkers(
object = seu,
only.pos = TRUE,
min.pct = 0.25,
group.by = "ident",
logfc.threshold = 0.25
)
library(Seurat)
all_markers <- FindAllMarkers(
object = seu,
only.pos = TRUE,
min.pct = 0.25,
group.by = "ident",
logfc.threshold = 0.25
)
load_all()  # 加载包的所有函数进行测试
cell_types <- llm_celltype(
input = top10_fc,
tissuename = "Thymus",
model = "gpt-4o",
topgenenumber = 10
)
cell_types <- llm_celltype(
input = all_markers,
tissuename = "Thymus",
model = "gpt-4o",
topgenenumber = 10
)
cell_types <- llm_celltype(
input = all_markers,
tissuename = "Thymus",
model = "gpt-4o",
topgenenumber = 10
)
setwd("D:/Coding/DeepCellSeek")
Sys.setenv(https_proxy= "http://127.0.0.1:7890")
cell_types <- llm_celltype(
input = all_markers,
tissuename = "Thymus",
model = "gpt-4o",
topgenenumber = 10
)
GABAergic <- readRDS("D:/Data/Done/Subtype/Neocortical/GABAergic/GABAergic.rds")
GABAergic <- readRDS("D:/Data/Done/Subtype/Neocortical/GABAergic/log2fc/GABAergic.rds")
all_markers <- FindAllMarkers(
object = GABAergic,
only.pos = TRUE,
min.pct = 0.25,
group.by = "ident",
logfc.threshold = 0.25
)
top10_fc <- all_markers %>%
filter(p_val_adj < 2.2e-16) %>%
group_by(cluster) %>%
arrange(desc(avg_log2FC), .by_group = TRUE) %>%
slice_head(n = 10) %>%
ungroup()
library(Matrix)
library(seurat)
top10_fc <- all_markers %>%
filter(p_val_adj < 2.2e-16) %>%
group_by(cluster) %>%
arrange(desc(avg_log2FC), .by_group = TRUE) %>%
slice_head(n = 10) %>%
ungroup()
library(dplyr)
library(data.table)
library(ggplot2)
top10_fc <- all_markers %>%
filter(p_val_adj < 2.2e-16) %>%
group_by(cluster) %>%
arrange(desc(avg_log2FC), .by_group = TRUE) %>%
slice_head(n = 10) %>%
ungroup()
cluster_genes <- top10_fc %>%
arrange(cluster) %>%
group_by(cluster) %>%
summarise(genes = paste(gene, collapse = ",")) %>%
mutate(cluster_label = paste0("cluster", cluster, ": ", genes)) %>%
pull(cluster_label)
writeLines(cluster_genes, "D:/Data/Done/cluster_genes.txt")
